#!/usr/bin/env node

/**
 * üîß BUILD SCHEMA SCRIPT
 * 
 * This script combines all Prisma schema modules into a single schema.prisma file
 * for compilation and validation
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const SCHEMA_DIR = path.join(__dirname, '../prisma');
const OUTPUT_FILE = path.join(SCHEMA_DIR, 'schema.prisma');

// Schema modules in order of dependency
const SCHEMA_MODULES = [
  'extensions/database.prisma',
  'models/enums.prisma',
  'models/user.prisma',
  'models/session.prisma',
  'models/security.prisma',
  'models/business.prisma'
];

// Header template
const HEADER = `// =====================================================
// RITMO - Modern Authentication & Session Management
// Schema designed with 2025 best practices
// 
// This file is auto-generated by build-schema.js
// DO NOT EDIT DIRECTLY - Edit the individual modules instead
// =====================================================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm, pgcrypto]
}

// =====================================================
// COMBINED SCHEMA FROM MODULES
// =====================================================

`;

// Footer template
const FOOTER = `
// =====================================================
// END OF AUTO-GENERATED SCHEMA
// =====================================================
`;

function buildSchema() {
  console.log('üîß Building Prisma schema from modules...');
  
  let combinedSchema = HEADER;
  
  // Read and combine each module
  for (const modulePath of SCHEMA_MODULES) {
    const fullPath = path.join(SCHEMA_DIR, modulePath);
    
    if (fs.existsSync(fullPath)) {
      console.log(`  üìÅ Reading ${modulePath}...`);
      const content = fs.readFileSync(fullPath, 'utf8');
      
      // Add module separator
      combinedSchema += `\n// =====================================================\n`;
      combinedSchema += `// MODULE: ${modulePath}\n`;
      combinedSchema += `// =====================================================\n\n`;
      combinedSchema += content;
      combinedSchema += '\n';
    } else {
      console.warn(`  ‚ö†Ô∏è  Warning: Module ${modulePath} not found`);
    }
  }
  
  combinedSchema += FOOTER;
  
  // Write combined schema
  fs.writeFileSync(OUTPUT_FILE, combinedSchema, 'utf8');
  
  console.log(`‚úÖ Schema built successfully: ${OUTPUT_FILE}`);
  console.log(`üìä Total modules combined: ${SCHEMA_MODULES.length}`);
  
  return combinedSchema;
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  try {
    buildSchema();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error building schema:', error);
    process.exit(1);
  }
}

export { buildSchema };
